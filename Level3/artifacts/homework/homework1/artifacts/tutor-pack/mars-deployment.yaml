apiVersion: v1
kind: Namespace
metadata:
  name: mars-app
  labels:
    name: mars-app
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mars-config
  namespace: mars-app
  labels:
    app: mars
    component: config
data:
  mars.config: |
    [config]
    # Server configuration
    server_address=0.0.0.0
    server_port=5000

    # Redis configuration
    redis_address=redis
    redis_port=6379

    # Application settings
    app_name=MARS
    app_version=2.0.0
    log_level=INFO

    # Security settings
    debug_mode=false

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: mars-app
  labels:
    app: redis
type: Opaque
data:
  # Default Redis password (change for production)
  password: UmVkaXNAMjAyNCE=  # Redis@2024!

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mars-logs-pvc
  namespace: mars-app
  labels:
    app: mars
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: managed-csi-premium  # AKS premium storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: mars-app
  labels:
    app: redis
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
      annotations:
        prometheus.io/scrape: "false"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: redis-data
        emptyDir: {}
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: mars-app
  labels:
    app: redis
    component: database
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mars-app
  namespace: mars-app
  labels:
    app: mars
    component: web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mars
  template:
    metadata:
      labels:
        app: mars
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: mars
        image: your-acr.azurecr.io/mars:latest  # Update with your ACR
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: CONFIG_PATH
          value: "/config/mars.config"
        - name: FLASK_ENV
          value: "production"
        - name: PYTHONUNBUFFERED
          value: "1"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: logs
          mountPath: /mnt/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: mars-config
      - name: logs
        persistentVolumeClaim:
          claimName: mars-logs-pvc
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: mars-service
  namespace: mars-app
  labels:
    app: mars
    component: web
spec:
  selector:
    app: mars
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mars-ingress
  namespace: mars-app
  labels:
    app: mars
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - mars.yourdomain.com
    secretName: mars-tls
  rules:
  - host: mars.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mars-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mars-hpa
  namespace: mars-app
  labels:
    app: mars
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mars-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 15

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mars-pdb
  namespace: mars-app
  labels:
    app: mars
    component: availability
spec:
  selector:
    matchLabels:
      app: mars
  maxUnavailable: 1