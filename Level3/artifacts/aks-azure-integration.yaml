# Modern AKS Integration Examples
# Demonstrates Azure-specific Kubernetes features

apiVersion: v1
kind: Namespace
metadata:
  name: azure-demo
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Azure Key Vault Secret Provider Class
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: app-secrets
  namespace: azure-demo
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: ""  # Leave empty to use system-assigned identity
    keyvaultName: "your-keyvault-name"
    objects: |
      array:
        - |
          objectName: database-connection-string
          objectType: secret
          objectVersion: ""
        - |
          objectName: api-key
          objectType: secret
          objectVersion: ""
    tenantId: "your-tenant-id"

---
# ServiceAccount with Azure Workload Identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: azure-workload-identity-sa
  namespace: azure-demo
  labels:
    azure.workload.identity/use: "true"
  annotations:
    azure.workload.identity/client-id: "your-managed-identity-client-id"

---
# Deployment using Azure features
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-integrated-app
  namespace: azure-demo
  labels:
    app: azure-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: azure-demo
  template:
    metadata:
      labels:
        app: azure-demo
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: azure-workload-identity-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: app
        image: mcr.microsoft.com/dotnet/aspnet:8.0
        ports:
        - containerPort: 8080
        env:
        - name: ASPNETCORE_URLS
          value: "http://+:8080"
        - name: AZURE_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['azure.workload.identity/client-id']
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "app-secrets"
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
        # Use Azure node pools with specific features
        agentpool: nodepool1

---
# Service with Azure Load Balancer annotations
apiVersion: v1
kind: Service
metadata:
  name: azure-demo-service
  namespace: azure-demo
  annotations:
    # Azure Load Balancer specific annotations
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /health
    service.beta.kubernetes.io/azure-load-balancer-health-probe-protocol: http
    service.beta.kubernetes.io/azure-load-balancer-health-probe-interval: "5"
    service.beta.kubernetes.io/azure-load-balancer-health-probe-num-of-probe: "2"
    service.beta.kubernetes.io/azure-pip-name: azure-demo-pip
    service.beta.kubernetes.io/azure-pip-tags: "Environment=Development,Project=AzureTraining"
spec:
  selector:
    app: azure-demo
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: LoadBalancer

---
# Ingress using Azure Application Gateway
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: azure-demo-ingress
  namespace: azure-demo
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/connection-draining: "true"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
    appgw.ingress.kubernetes.io/cookie-based-affinity: "false"
    appgw.ingress.kubernetes.io/request-timeout: "20"
    appgw.ingress.kubernetes.io/use-private-ip: "false"
spec:
  tls:
  - hosts:
    - azure-demo.yourdomain.com
    secretName: azure-demo-tls
  rules:
  - host: azure-demo.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: azure-demo-service
            port:
              number: 80

---
# HPA with custom metrics (requires Azure Monitor)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: azure-demo-hpa
  namespace: azure-demo
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: azure-integrated-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: External
    external:
      metric:
        name: azure_application_gateway_requests_per_second
        selector:
          matchLabels:
            resource_group: "your-resource-group"
            application_gateway: "your-app-gateway"
      target:
        type: Value
        value: "100"

---
# PodDisruptionBudget for availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: azure-demo-pdb
  namespace: azure-demo
spec:
  selector:
    matchLabels:
      app: azure-demo
  maxUnavailable: 1